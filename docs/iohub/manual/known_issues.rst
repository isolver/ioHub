=====================================
Known Considerations and Limitations
=====================================


PsychoPy Integration Considerations
====================================

#. The time base integration between PsychoPy and ioHub relies on the use of the core.getTime() function or the **default** logging clock object, logging.defaultClock(). Do not use custom created Clock() instances when there is a need to compare the PsychoPy time and an ioHub time. The time returned by window.flip() uses the core.getTime() time base by default, so it is safe to use in calculations with ioHub event times when determining reaction times, etc.
#. When ioHub is used with PsychoPy, none of the redundant event handling and processing done by pyglet and psychopy on the Experiment Process is disabled. This is, for the short term, actually viewed as a good thing as it will allow events from ioHub and events generated by pyglet to be compared when time permits. In the medium to long term however, adding the ability to 'turn off' Experiment Process event logic that ioHub is now being used for will make a lot of sense and will help reduce the load ( and perhaps number of threads) needed on the Experiment Process. 

ioHub Functionality Issues
============================
 
#. See the project `issue tracker <https://github.com/isolver/ioHub/issues?state=open>`_ for a detailed list of open feature requests and bugs.
#. The ioHub supports mapping event coordinates to a **single**, **full screen** Window at this time. On multi-monitor computer setups, the Display that is used for the full screen stimulus Window can be specified as part of the DIsplay configuration. For many studies this is not really a limitation at all, however given PsychoPy supports non-full screen windows, and multiple Windows, ioHub should be updated to support the same level of functionality.

