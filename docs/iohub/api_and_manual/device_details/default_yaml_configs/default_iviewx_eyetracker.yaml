# This section includes all valid smi.iviewx.EyeTracker Device
# settings that can be specified in an iohub_config.yaml
# or in a Python dictionary form and passed to the quickStartHubServer
# method. Any device parameters not specified when the device class is
# created by the ioHub Process will be assigned the default value
# indicated here.
#
eyetracker.hw.smi.iviewx.EyeTracker:
    # name: The unique name to assign to the device instance created.
    #   The device is accessed from within the PsychoPy script 
    #   using the name's value; therefore it must be a valid Python
    #   variable name as well.
    #
    name: tracker

    # enable: Specifies if the device should be enabled by ioHub and monitored
    #   for events.
    #   True = Enable the device on the ioHub Server Process
    #   False = Disable the device on the ioHub Server Process. No events for
    #   this device will be reported by the ioHub Server.
    #    
    enable: True

    # saveEvents: *If* the ioHubDataStore is enabled for the experiment, then
    #   indicate if events for this device should be saved to the
    #   data_collection/keyboard event group in the hdf5 event file.
    #   True = Save events for this device to the ioDataStore.
    #   False = Do not save events for this device in the ioDataStore.
    #    
    saveEvents: True

    # streamEvents: Indicate if events from this device should be made available
    #   during experiment runtime to the PsychoPy Process.
    #   True = Send events for this device to  the PsychoPy Process in real-time.
    #   False = Do *not* send events for this device to the PsychoPy Process in real-time.
    #    
    streamEvents: True

    # auto_report_events: Indicate if events from this device should start being
    #   processed by the ioHub as soon as the device is loaded at the start of an experiment,
    #   or if events should only start to be monitored on the device when a call to the
    #   device's enableEventReporting method is made with a parameter value of True.
    #   True = Automatically start reporting events for this device when the experiment starts.
    #   False = Do not start reporting events for this device until enableEventReporting(True)
    #   is set for the device during experiment runtime.
    #
    auto_report_events: False

    # event_buffer_length: Specify the maximum number of events (for each
    #   event type the device produces) that can be stored by the ioHub Server
    #   before each new event results in the oldest event of the same type being
    #   discarded from the ioHub device event buffer.
    #
    event_buffer_length: 1024

    # device_timer: The EyeGaze EyeTracker class uses the polling method to
    #   check for new events received from the EyeTracker device. device_timer.interval
    #   specifies the sec.msec time between device polls. 0.004 = 4 msec, so the device will
    #   be polled at a maxximum rate of 250 Hz. This polling rate is a 'target' value,
    #   and may not always be achieved depending on your computer specifications and the
    #   number and type of other devices being used. This can be checked by reviewing the
    #   confidence_interval column of any of the eye event tables saved to the DataStore
    #    
    device_timer:
        interval: 0.002

    # monitor_event_types: The iViewX supports the following event types:
    #   * MonocularEyeSampleEvent
    #   * BinocularEyeSampleEvent
    #   * FixationStartEvent
    #   *FixationEndEvent  
    #   If you would like to exclude certain events from being saved
    #   or streamed during runtime, remove them from the list below.
    #    
    monitor_event_types: [ BinocularEyeSampleEvent, FixationStartEvent, FixationEndEvent]

    # network_settings: The iViewX network settings specify the pyViewX 
    #   computer IP and port and the iViewX Apllication / Server Computer
    #   IP and port. By default the configuration is set to the popular 
    #   single PC configuration for the system.
    #    
    network_settings:
        send_ip_address: 127.0.0.1
        # Port being used by iView X SDK for sending data to iView X 
        send_port: 4444
        # IP address of local computer
        receive_ip_address: 127.0.0.1
        # port being used by iView X SDK for receiving data from iView X
        receive_port: 5555	            

    runtime_settings:
        # sampling_rate: Sampling rate can not be set via the SMI SDK, 
        #   however the current hardware sampling rate can be read.
        #   Use this field to enter the sampling rate you expect the hardware
        #   to be running at; the the rate specified here does not match the hardware's 
        #   current sampling rate, an error will be generated when the experiment starts.
        #    
        sampling_rate: 60

        # track_eyes: The iViewX supports the following track_eyes values:  
        #   LEFT_EYE, RIGHT_EYE, BINOCULAR, BINOCULAR_AVERAGED
        #    
        track_eyes: BINOCULAR_AVERAGED

        # sample_filtering: Enable or disable sample filtering. Use the
        #   sample stream type 'FILTER_ALL' with a filter level of either
        #   FILTER_OFF or FILTER_ON
        #    
        sample_filtering:
            FILTER_ALL: FILTER_OFF            

        # VOG settings allow you to specify some eye tracker parameters related to
        # the image processing or data collection procedure used by the eye tracker
        # device. 
        #    
        vog_settings:
            # pupil_measure_types: One pupil_measure_types parameter
            #   for any eyes being tracked is supported. 
            #   PUPIL_DIAMETER, PUPIL_DIAMETER_MM are valid pupil measure
            #   types for the iViewX.
            #    
            pupil_measure_types: PUPIL_DIAMETER

    # calibration: iViewX supports the following calibration type constants: 
    calibration:

        # type: How many points should be used for the calibration sequence.
        #    Valid inputs are THREE_POINTS, FIVE_POINTS, NINE_POINTS
        type: NINE_POINTS

        # auto_pace: If True, the eye tracker will automatically progress
        #   from one calibration point to the next. If False, a manual key
        #   or button press is needed to progress to the next point.
        #   
        auto_pace: Yes

        # pacing_speed: How long a calibration point should
        # be displayed before moving onto the next point when auto_pace 
        # is set to true. iViewX supports two values for this field: FAST and SLOW
        # If auto_pace is False, pacing_speed is ignored.
        #    
        pacing_speed: SLOW

        # screen_background_color: For the iView system, screen_background_color 
        #   specifies a greyscale value (0 - 255) that gets used to specify
        #   the brightness of the calibration screen.
        #
        screen_background_color: 20

        # target_type: target type defines what form of calibration graphic should be used
        #   during calibration, validation, etc. modes.
        #   The iView ioHub eye tracker implementation supports the following
        #   target types CIRCLE_TARGET, CROSSHAIR_TARGET, IMAGE_TARGET      
        #    
        target_type: CIRCLE_TARGET
        
        # target_attributes: The asociated target attributes sub properties must be supplied
        #   for the given target_type. If target type attribute sections are provided
        #   for target types other than the entry associated with the specified target_type value
        #   they will simple be ignored.
        #    
        target_attributes:
            target_size: 30
            target_color: 239
            target_inner_color: RED
 
        # show_validation_accuracy_window: Should a Window showing the validation
        #   accuracy as a gaze point overlay be displayed following a validation procedure?
        #    
        show_validation_accuracy_window: True
  
    # model_name: The model_name setting allows the definition of the eye tracker model being used.
    #   For the iViewX implementation, valid values are:
    #   RED, REDm, HiSpeed, MRI, HED, ETG, or Custom
    #    
    model_name: REDm

    # manufacturer_name is used to store the name of the maker of the eye tracking
    #   device. This is for informational purposes only.
    #    
    manufacturer_name: SensoMotoric Instruments GmbH

    # serial_number: The serial number for the specific isnstance of device used
    #   can be specified here. It is not used by the ioHub, so is FYI only.
    #
    serial_number: N/A

    # manufacture_date: The date of manufactiurer of the device 
    #    can be specified here. It is not used by the ioHub,
    #   so is FYI only.
    #   
    manufacture_date: DD-MM-YYYY

    # hardware_version: The device's hardware version can be specified here.
    #   It is not used by the ioHub, so is FYI only.
    #
    hardware_version: N/A
    
    # firmware_version: If the device has firmware, its revision number
    #   can be indicated here. It is not used by the ioHub, so is FYI only.
    #
    firmware_version: N/A

    # model_number: The device model number can be specified here.
    #   It is not used by the ioHub, so is FYI only.
    #
    model_number: N/A
    
    # software_version: The device driver and / or SDK software version number.
    #   This field is not used by ioHub, so is FYI only. 
    software_version: N/A

    # device_number: The device number to assign to the Analog Input device. 
    #   device_number is not used by this device type.
    #
    device_number: 0
